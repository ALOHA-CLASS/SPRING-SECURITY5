package com.aloha.kakaojoin.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.aloha.kakaojoin.domain.CustomUser;
import com.aloha.kakaojoin.domain.UserAuth;
import com.aloha.kakaojoin.domain.UserSocial;
import com.aloha.kakaojoin.domain.Users;
import com.aloha.kakaojoin.mapper.UserMapper;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserMapper userMapper;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Override
    public boolean login(Users user) throws Exception {
        // // üíç ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        String username = user.getUsername();         // ÏïÑÏù¥Îîî
        String password = user.getPassword();    // ÏïîÌò∏ÌôîÎêòÏßÄ ÏïäÏùÄ ÎπÑÎ∞ÄÎ≤àÌò∏
        UsernamePasswordAuthenticationToken token 
            = new UsernamePasswordAuthenticationToken(username, password);
        
        // ÌÜ†ÌÅ∞Ïóê ÏöîÏ≤≠ Ï†ïÎ≥¥ Îì±Î°ù
        // token.setDetails( new WebAuthenticationDetails(request) );

        // ÌÜ†ÌÅ∞ÏùÑ Ïù¥Ïö©ÌïòÏó¨ Ïù∏Ï¶ù
        Authentication authentication = authenticationManager.authenticate(token);

        // Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
        CustomUser loginUser = (CustomUser) authentication.getPrincipal();
        log.info("Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê ÏïÑÏù¥Îîî : " + loginUser.getUser().getUsername());
        boolean result = authentication.isAuthenticated();

        // ÏãúÌÅêÎ¶¨Ìã∞ Ïª®ÌÖçÏä§Ìä∏Ïóê Îì±Î°ù
        SecurityContextHolder.getContext().setAuthentication(authentication);

        return result;
    }

    @Override
    public Users select(String id) throws Exception {
        Users user = userMapper.select(id);
        return user;
    }

    @Override
    public int join(Users user) throws Exception {
        String username = user.getUsername();
        String password = user.getPassword();
        String encodedPassword = passwordEncoder.encode(password);  // üîí ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî
        user.setPassword(encodedPassword);

        // ÌöåÏõê Îì±Î°ù
        int result = userMapper.join(user);

        if( result > 0 ) {
            // ÌöåÏõê Í∏∞Î≥∏ Í∂åÌïú Îì±Î°ù
            UserAuth userAuth = new UserAuth();
            userAuth.setUsername(username);
            userAuth.setAuth("ROLE_USER");
            result = userMapper.insertAuth(userAuth);
        }
        return result;
    }

    @Override
    public int update(Users user) throws Exception {
        int result = userMapper.update(user);
        return result;
    }

    @Override
    public int insertAuth(UserAuth userAuth) throws Exception {
        int result = userMapper.insertAuth(userAuth);
        return result;
    }

    @Override
    public int insertSocial(UserSocial userSocial) throws Exception {
        int result = userMapper.insertSocial(userSocial);
        return result;
    }

    @Override
    public UserSocial selectSocial(UserSocial userSocial) throws Exception {
        UserSocial selectedUserSocial = userMapper.selectSocial(userSocial);
        return selectedUserSocial;
    }

    @Override
    public int updateSocial(UserSocial userSocial) throws Exception {
        int result = userMapper.updateSocial(userSocial);
        return result;
    }

    @Override
    public Users selectBySocial(UserSocial userSocial) throws Exception {
        Users user = userMapper.selectBySocial(userSocial);
        return user;
    }
    
}
